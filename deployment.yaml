---
# StorageClass
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
---
# PersistentVolume
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mysql-pv
spec:
  capacity:
    storage: 1Gi
  volumeMode: Filesystem
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  storageClassName: local-storage
  local:
    path: /mnt/data
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - worker01

---
# PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: local-storage
  resources:
    requests:
      storage: 1Gi
---
# MySQL ConfigMap for initialization
apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-script
data:
  init.sql: |
    CREATE DATABASE IF NOT EXISTS crud_db;
    USE crud_db;
    CREATE TABLE IF NOT EXISTS boards (
    id INT AUTO_INCREMENT PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    content TEXT NOT NULL,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    );
  my.cnf: |
    [mysqld]
    bind-address = 0.0.0.0
    skip-host-cache
    skip-name-resolve
    # SSL 비활성화 설정
    ssl=0
    skip_ssl
    ssl=OFF
---
# MySQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      nodeSelector:
        kubernetes.io/hostname: worker01
      containers:
      - name: mysql
        image: mysql:8.0
        command: ["mysqld", "--ssl=0", "--skip-host-cache", "--skip-name-resolve"]
        ports:
        - containerPort: 3306
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: "password"
        - name: MYSQL_DATABASE
          value: "crud_db"
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
        - name: mysql-config-volume
          mountPath: /etc/mysql/conf.d/my.cnf   # MySQL이 설정을 읽는 경로
          subPath: my.cnf                        # ConfigMap 내 파일 이름
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
      - name: mysql-config-volume
        configMap:
          name: mysql-init-script                 # ConfigMap 이름이 mysql-init-script인 점 확인
          items:
          - key: my.cnf
            path: my.cnf
---
# MySQL Service
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
spec:
  type: ClusterIP
  ports:
  - port: 3306
    targetPort: 3306
  selector:
    app: mysql
---
# Express App Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: express-jquery-mysql-crud
spec:
  replicas: 1
  selector:
    matchLabels:
      app: express-jquery-mysql-crud
  template:
    metadata:
      labels:
        app: express-jquery-mysql-crud
    spec:
      containers:
      - name: express-jquery-mysql-crud
        image: binyoonan/express-mysql-crud:latest
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          value: "production"
        - name: MYSQL_PORT
          value: "3306"
        - name: MYSQL_HOST
          value: "mysql-service"
        - name: MYSQL_USER
          value: "root"
        - name: MYSQL_PASSWORD
          value: "password"
        - name: MYSQL_DATABASE
          value: "crud_db"
        - name: CORS_ORIGIN
          value: "*"
---
# Express App Service
apiVersion: v1
kind: Service
metadata:
  name: express-jquery-mysql-crud-service
spec:
  type: LoadBalancer
  ports:
  - port: 80
    targetPort: 3000
    nodePort: 30080
  selector:
    app: express-jquery-mysql-crud
